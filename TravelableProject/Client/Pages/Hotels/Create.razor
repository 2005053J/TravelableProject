@page "/hotels/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Hotels</h3>
<hr />
<br />

<EditForm Model="@hotel" OnValidSubmit="CreateHotel">
    <DataAnnotationsValidator />
    <ValidationSummary />

<div class="form-group">
    <label>Hotel Name: </label>
    <div>
        <InputText @bind-Value="@hotel.HotelName" class="form-control" />
        <ValidationMessage For="@(() => hotel.HotelName)" />
    </div>
</div>

<div class="form-group">
    <label>Hotel Country: </label>
    <div>
        <InputText @bind-Value="@hotel.Country" class="form-control" />
        <ValidationMessage For="@(() => hotel.Country)" />
    </div>
</div>

<div class="form-group">
    <label>Hotel Address: </label>
    <div>
        <InputText @bind-Value="@hotel.HotelAddress" class="form-control" />
        <ValidationMessage For="@(() => hotel.HotelAddress)" />
    </div>
</div>

<button type="submit" class="btn btn-success btn-block">
    Create Hotel
</button>
<TravelableProject.Client.Components.BackToList Target="hotels" />
</EditForm>

@code {
    Hotel hotel = new Hotel();

    private IList<Payment> Payments;
    private IList<Room> Rooms;
    private IList<Duration> Durations;

    protected async override Task OnInitializedAsync()
    {
        Rooms = await _client.GetFromJsonAsync<List<Room>>($"{Endpoints.RoomsEndpoint}");
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");
        Durations = await _client.GetFromJsonAsync<List<Duration>>($"{Endpoints.DurationsEndpoint}");
    }

    private async Task CreateHotel()
    {
        await _client.PostAsJsonAsync(Endpoints.HotelsEndpoint, hotel);
        _navManager.NavigateTo("/hotels/");
    }

}
