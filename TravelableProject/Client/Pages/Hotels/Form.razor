@inject HttpClient _client

<EditForm Model="@hotel" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Name: </label>
        <div>
            <InputText @bind-Value="@hotel.HotelName" class="form-control" />
            <ValidationMessage For="@(() => hotel.HotelName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Address: </label>
        <div>
            <InputText @bind-Value="@hotel.HotelAddress" class="form-control" />
            <ValidationMessage For="@(() => hotel.HotelAddress)" />
        </div>
    </div>

    <div class="form-group">
        <label>Contact Number: </label>
        <div>
            <InputText @bind-Value="@hotel.Country" class="form-control" />
            <ValidationMessage For="@(() => hotel.Country)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        @ButtonText
    </button>
    <TravelableProject.Client.Components.BackToList Target="hotels" />
</EditForm>

@code {
    [Parameter] public Hotel hotel { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Room> Rooms;
    private IList<Duration> Durations;
    private IList<Payment> Payments;

    protected async override Task OnInitializedAsync()
    {
        Rooms = await _client.GetFromJsonAsync<List<Room>>($"{Endpoints.RoomsEndpoint}");
        Durations = await _client.GetFromJsonAsync<List<Duration>>($"{Endpoints.DurationsEndpoint}");
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");
    }
}
