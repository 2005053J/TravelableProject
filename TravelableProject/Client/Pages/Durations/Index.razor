@page "/durations/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Hotel Durations</h3>
<br />

<a href="/durations/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Duration
</a>
<br />
<br />

@if (Durations == null)
{
    <div class="alert alert-info">Loading Durations...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>StayTime</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var duration in Durations)
            {
                <tr>
                    <td>@duration.StayTime</td>
                    <td>
                        <a href="/durations/view/@duration.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/durations/edit/@duration.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(duration.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Duration> Durations;

    protected async override Task OnInitializedAsync()
    {
        Durations = await _client.GetFromJsonAsync<List<Duration>>($"{Endpoints.DurationsEndpoint}");
    }

    async Task Delete(int durationId)
    {
        var duration = Durations.First(q => q.Id == durationId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {duration.StayTime}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.DurationsEndpoint}/{durationId}");
            await OnInitializedAsync();
        }
    }
}
